#DEAP Implementation
import random
from deap import base, creator, tools, algorithms

# Define the evaluation function
def eval_func(individual):
    # Calculate the fitness value of the individual as the sum of squares of its components
    return sum(x ** 2 for x in individual),

# DEAP setup

# Create a FitnessMin class to minimize the fitness value
creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
# Create an Individual class which is a list with a fitness attribute of FitnessMin
creator.create("Individual", list, fitness=creator.FitnessMin)

# Create a toolbox to register functions
toolbox = base.Toolbox()

# Register a function to generate a random float between -5.0 and 5.0 as an attribute for an individual
toolbox.register("attr_float", random.uniform, -5.0, 5.0)

# Register a function to create an individual with n attributes (in this case, 3)
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_float, n=3)

# Register a function to create a population of individuals
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

# Register genetic operators

# Register a crossover function (Blend crossover with alpha=0.5)
toolbox.register("mate", tools.cxBlend, alpha=0.5)

# Register a mutation function (Gaussian mutation with mean=0, standard deviation=1, and mutation probability=0.2)
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=1, indpb=0.2)

# Register a selection function (Tournament selection with tournament size=3)
toolbox.register("select", tools.selTournament, tournsize=3)

# Register the evaluation function
toolbox.register("evaluate", eval_func)

# Genetic Algorithm parameters

# Initialize a population of 50 individuals
population = toolbox.population(n=50)

# Run the simple evolutionary algorithm (eaSimple)
# with crossover probability=0.5, mutation probability=0.1, and number of generations=20
algorithms.eaSimple(population, toolbox, cxpb=0.5, mutpb=0.1, ngen=20)

# Get the best individual after generations
best_ind = tools.selBest(population, k=1)[0]
best_fitness = best_ind.fitness.values[0]

# Print the best individual and its fitness value
print("Best individual:", best_ind)
print("Best fitness:", best_fitness)
